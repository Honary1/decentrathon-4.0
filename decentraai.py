# -*- coding: utf-8 -*-
"""decentraai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b6MMkgvG5N550M9vzdowvg4eydhoeBWW
"""

from ultralytics import YOLO
from IPython.display import display # Оставляем display
from google.colab import files
import io
import cv2
import numpy as np
from PIL import Image # Импортируем Image из PIL без переименования, но используем осторожно

model_path = '/content/runs/detect/train4/weights/best.pt' 
try:
    model = YOLO(model_path)
    print("Модель успешно загружена!")
except Exception as e:
    print(f"Ошибка при загрузке модели: {e}")
    print("Убедитесь, что обучение завершено и файл 'best.pt' существует по указанному пути.")
    model = None 

def upload_and_predict():
    if model is None:
        print("Модель не загружена. Невозможно сделать предсказания.")
        return

    uploaded = files.upload() 

    for filename in uploaded.keys():
        print(f"Загружен файл: {filename}")

        img_bytes = uploaded[filename]
        img = Image.open(io.BytesIO(img_bytes)) 
        img_np = np.array(img)

        img_bgr = cv2.cvtColor(img_np, cv2.COLOR_RGB2BGR)

        print("\n---- Результат анализа ИИ ----")

        results = model(img_bgr)

        for r in results:
            annotated_image_path = f'predicted_{filename}'
            r.save(filename=annotated_image_path)
            print(f"Визуализация сохранена как: {annotated_image_path}")

            display(Image.open(annotated_image_path))


            if len(r.boxes) == 0:
                print("На изображении не обнаружено повреждений или царапин. Автомобиль в хорошем состоянии.")
            else:
                print("Обнаружено:")
                for box in r.boxes:
                    class_id = int(box.cls)
                    class_name = model.names[class_id]
                    confidence = float(box.conf)
                    print(f"- {class_name}: Уверенность {confidence:.2f}")
            print("------------------------------\n")

upload_and_predict()
